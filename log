
#--- Start indexing by samtools...
/home/hpc/cychen/user/dungchi/bin/samtools-1.2/samtools faidx Ref/test.fasta
#--- Samtools Indexing is done!

#--- Start indexing by bwa...
/home/hpc/cychen/user/dungchi/bin/bwa-0.7.12/bwa index -a bwtsw Ref/test.fasta
[bwt_gen] Finished constructing BWT in 3 iterations.
#--- BWA Indexing is done! \n

#--- Start indexing by bowtie2...
/home/hpc/cychen/user/dungchi/bin/bowtie2-2.2.6/bowtie2-build Ref/test.fasta Ref/test.fasta 
Settings:
  Output files: "Ref/test.fasta.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Ref/test.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 4142
Using parameters --bmax 3107 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3107 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2070.5 (target: 3106)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1838
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1839
Getting block 2 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2048
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2049
Getting block 3 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2838
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2839
Getting block 4 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1953
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1954
Getting block 5 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1703
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1704
Getting block 6 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2522
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2523
Getting block 7 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 3081
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 3082
Getting block 8 of 8
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 581
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 582
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 5113
fchr[G]: 10305
fchr[T]: 12485
fchr[$]: 16571
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4200038 bytes to primary EBWT file: Ref/test.fasta.1.bt2
Wrote 4148 bytes to secondary EBWT file: Ref/test.fasta.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 16571
    bwtLen: 16572
    sz: 4143
    bwtSz: 4143
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 1036
    offsSz: 4144
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 87
    numLines: 87
    ebwtTotLen: 5568
    ebwtTotSz: 5568
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 4142
Using parameters --bmax 3107 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3107 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2366.43 (target: 3106)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2705
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2706
Getting block 2 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2069
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2070
Getting block 3 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2901
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2902
Getting block 4 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2601
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2602
Getting block 5 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2418
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2419
Getting block 6 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 2421
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2422
Getting block 7 of 7
  Reserving size (3107) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 1450
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 1451
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 5113
fchr[G]: 10305
fchr[T]: 12485
fchr[$]: 16571
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4200038 bytes to primary EBWT file: Ref/test.fasta.rev.1.bt2
Wrote 4148 bytes to secondary EBWT file: Ref/test.fasta.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 16571
    bwtLen: 16572
    sz: 4143
    bwtSz: 4143
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 1036
    offsSz: 4144
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 87
    numLines: 87
    ebwtTotLen: 5568
    ebwtTotSz: 5568
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01
#--- Bowtie2 Indexing is done! \n

#--- Start indexing by picard tools...
java -jar /home/hpc/cychen/user/dungchi/bin/picard-tools-1.139/picard.jar CreateSequenceDictionary R=Ref/test.fasta O=Ref/test.fasta.dict
#--- Picard Indexing is done! \n

The file:  ./Ref/test.fasta  has been indexed.
Check the folder: ./Ref
